[{"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\index.js":"1","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\store.service.js":"2","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\App.js":"3","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\privateRoute.js":"4","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\reducer\\updateUser.js":"5","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\socket.service.js":"6","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\NotFound.js":"7","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\menu.js":"8","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\home\\home.js":"9","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\auth.service.js":"10","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\admin\\account.js":"11","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\admin\\updatePassword.js":"12","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\authenticate\\register.js":"13","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\authenticate\\login.js":"14","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\User\\UserProfile.js":"15","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\home\\managementUsers.js":"16","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\AllRooms.js":"17","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\RoomFinish.js":"18","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\host.service.js":"19","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\sideBar.js":"20","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\home\\listUser.js":"21","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\topBar.js":"22","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\data.service.js":"23","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\Game\\game.js":"24","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\FinishRoomList.js":"25","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\title.service.js":"26","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\Game\\board.js":"27","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\sideBarList.js":"28","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\index.js":"29","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\Game\\square.js":"30","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Join\\Join.js":"31","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Chat\\Chat.js":"32","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\TextContainter\\TextContainer.js":"33","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Messages\\Messages.js":"34","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Input\\Input.js":"35","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\InforBar\\InforBar.js":"36","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Messages\\Message\\Message.js":"37"},{"size":385,"mtime":1607360108709,"results":"38","hashOfConfig":"39"},{"size":154,"mtime":1607360108713,"results":"40","hashOfConfig":"39"},{"size":3586,"mtime":1610025047481,"results":"41","hashOfConfig":"39"},{"size":635,"mtime":1607360108710,"results":"42","hashOfConfig":"39"},{"size":328,"mtime":1609382388471,"results":"43","hashOfConfig":"39"},{"size":214,"mtime":1608857798070,"results":"44","hashOfConfig":"39"},{"size":284,"mtime":1607360108703,"results":"45","hashOfConfig":"39"},{"size":692,"mtime":1607360108707,"results":"46","hashOfConfig":"39"},{"size":1967,"mtime":1607360108706,"results":"47","hashOfConfig":"39"},{"size":2048,"mtime":1610156920413,"results":"48","hashOfConfig":"39"},{"size":6751,"mtime":1610025047534,"results":"49","hashOfConfig":"39"},{"size":6000,"mtime":1607360108704,"results":"50","hashOfConfig":"39"},{"size":9873,"mtime":1610529563099,"results":"51","hashOfConfig":"39"},{"size":7447,"mtime":1610529771650,"results":"52","hashOfConfig":"39"},{"size":7375,"mtime":1610537005016,"results":"53","hashOfConfig":"39"},{"size":9842,"mtime":1610526356388,"results":"54","hashOfConfig":"39"},{"size":7768,"mtime":1610261999661,"results":"55","hashOfConfig":"39"},{"size":6584,"mtime":1610533792370,"results":"56","hashOfConfig":"39"},{"size":251,"mtime":1610549280841,"results":"57","hashOfConfig":"39"},{"size":2034,"mtime":1607360108708,"results":"58","hashOfConfig":"39"},{"size":1794,"mtime":1607360108707,"results":"59","hashOfConfig":"39"},{"size":4031,"mtime":1607360108709,"results":"60","hashOfConfig":"39"},{"size":2083,"mtime":1610536092702,"results":"61","hashOfConfig":"39"},{"size":9053,"mtime":1610523297554,"results":"62","hashOfConfig":"39"},{"size":7224,"mtime":1610535795194,"results":"63","hashOfConfig":"39"},{"size":439,"mtime":1607360108713,"results":"64","hashOfConfig":"39"},{"size":937,"mtime":1610025047514,"results":"65","hashOfConfig":"39"},{"size":2370,"mtime":1610521917345,"results":"66","hashOfConfig":"39"},{"size":66,"mtime":1610025047513,"results":"67","hashOfConfig":"39"},{"size":206,"mtime":1610025047516,"results":"68","hashOfConfig":"39"},{"size":1038,"mtime":1610025047488,"results":"69","hashOfConfig":"39"},{"size":1786,"mtime":1610025047485,"results":"70","hashOfConfig":"39"},{"size":955,"mtime":1610025047513,"results":"71","hashOfConfig":"39"},{"size":378,"mtime":1610025047501,"results":"72","hashOfConfig":"39"},{"size":413,"mtime":1610025047487,"results":"73","hashOfConfig":"39"},{"size":237,"mtime":1610025047486,"results":"74","hashOfConfig":"39"},{"size":1109,"mtime":1610025047500,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1lkxazn",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\index.js",[],["161","162"],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\store.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\App.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\privateRoute.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\reducer\\updateUser.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\socket.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\NotFound.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\menu.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\home\\home.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\auth.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\admin\\account.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\admin\\updatePassword.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\authenticate\\register.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\authenticate\\login.js",["163","164","165","166","167"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    useHistory,\r\n    useLocation\r\n} from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport Container from '@material-ui/core/Container';\r\nimport AuthService from \"../../utils/auth.service\";\r\nimport socket from \"../../utils/socket.service\";\r\nimport store from '../../utils/store.service';\r\nimport HostURL from '../../utils/host.service';\r\n\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {FaFacebookSquare} from \"react-icons/fa\";\r\nimport {SiGmail} from \"react-icons/si\";\r\n\r\nconst queryString = require('query-string');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(10),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2),\r\n    },\r\n    flexContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\"\r\n    },\r\n    buttonSeparate: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        justifyContent: \"flex-start\",\r\n        paddingLeft: theme.spacing(10)\r\n    },\r\n    marginTop: {\r\n        marginTop: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nfunction Login(props) {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(location.search);\r\n        if (parsed.id && Number(parsed.id) === -1) {\r\n            alert(\"Unauthorized User Detected\");\r\n        }\r\n        else if (parsed.id && parsed.name && parsed.token) {\r\n            AuthService.loginExternal(parsed.id, parsed.name, parsed.token)\r\n            store.dispatch({ type: 'user/updateUser' })\r\n            history.replace(\"/\")\r\n\r\n            const user = store.getState();\r\n            socket.emit(\"online\", { ID: user.ID, name: user.name });\r\n        }\r\n\r\n    }, [])\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value;\r\n        setUsername(username);\r\n    };\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value;\r\n        setPassword(password);\r\n    };\r\n\r\n    // auth\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { from } = location.state || { from: { pathname: \"/\" } };\r\n    const login = async (e) => {\r\n        e.preventDefault();\r\n        setMessage(\"\");\r\n\r\n        if (username === \"\" || password === \"\") {\r\n            setMessage(\"Username or password must not be empty\");\r\n        }\r\n        else {\r\n            try {\r\n                await AuthService.login(username, password)\r\n                props.dispatch({ type: 'user/updateUser' })\r\n\r\n                const user = store.getState();\r\n                socket.emit(\"online\", { ID: user.ID, name: user.name });\r\n\r\n                history.replace(from);\r\n            }\r\n            catch (error) {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setMessage(resMessage);\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    // auto go to home when logged in\r\n    if (AuthService.getCurrentUser()) {\r\n        history.replace('/');\r\n    }\r\n\r\n    const hostFacebook = HostURL.getHostURL() + \"auth/facebook\";\r\n    const hostGoogle = HostURL.getHostURL() + \"auth/google\";\r\n  \r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Admin Log in\r\n                </Typography>\r\n                <form className={classes.form}>\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <Alert severity=\"error\">\r\n                                {message}\r\n                            </Alert>\r\n                        </div>\r\n                    )}\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        autoComplete=\"username\"\r\n                        autoFocus\r\n                        onChange={(value) => onChangeUsername(value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"new-password\"\r\n                        onChange={(value) => onChangePassword(value)}\r\n                    />\r\n                    <Button\r\n                        onClick={(e) => login(e)}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Divider />\r\n                    <div className={classes.marginTop}>\r\n                        <Button className={classes.buttonSeparate} fullWidth variant=\"outlined\" href={hostFacebook} color=\"primary\"\r\n                        >\r\n                            <FaFacebookSquare style={{ fontSize: 40 }}/>\r\n                            &nbsp;&nbsp;&nbsp;Register with Facebook\r\n                        </Button>\r\n                        <Button className={classes.buttonSeparate} fullWidth variant=\"outlined\" href={hostGoogle} color=\"secondary\">\r\n                            <SiGmail style={{ fontSize: 40}}/>\r\n                            &nbsp;&nbsp;&nbsp;Register with Gmail\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default connect()(Login)","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\User\\UserProfile.js",["168","169","170","171","172","173","174","175"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    useParams, useHistory,\r\n} from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport DataService from \"../../utils/data.service\";\r\nimport FinishRoomList from \"../Rooms/FinishRoomList\";\r\nimport isPlainObject from \"react-redux/lib/utils/isPlainObject\";\r\nconst config = require(\"../../utils/config.json\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(4),\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n        width: 200,\r\n        height: 200\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        overflow: 'auto',\r\n        marginTop: '20px',\r\n    },\r\n    container: {\r\n        width: '80%',\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n    card: {\r\n        width: '60%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(4),\r\n    },\r\n\r\n}));\r\n\r\nexport default function Account() {\r\n    const classes = useStyles();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [isBan, setIsBan] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [status, setStatus] = useState(\"error\");\r\n\r\n    const ID = useParams().id;\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const res = await DataService.getUserByUserId(ID);\r\n                setUsername(res.data[0].username);\r\n                setEmail(res.data[0].email);\r\n                setFullname(res.data[0].fullname);\r\n                setIsBan(res.data[0].status);\r\n            }\r\n            catch (error) {\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [ID])\r\n\r\n    const banAccount = (e) => {\r\n        e.preventDefault();\r\n        const ban = DataService.banAccount(ID, isBan);\r\n        if (isBan === config.STATUS.ACTIVE) {\r\n            setIsBan(config.STATUS.INACTIVE);\r\n        }\r\n        else {\r\n            setIsBan(config.STATUS.ACTIVE);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n            <div className={classes.appBarSpacer} />\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={12} >\r\n                        <Card className={classes.paper}>\r\n                            <Avatar className={classes.avatar} src={'https://picsum.photos/200'}>\r\n                            </Avatar>\r\n                            <form className={classes.form} noValidate>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        {message && (\r\n                                            <div className=\"form-group\">\r\n                                                <Alert severity={status}>\r\n                                                    {message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        )}\r\n                                        <TextField\r\n                                            autoComplete=\"username\"\r\n                                            variant=\"outlined\"\r\n                                            required\r\n                                            fullWidth\r\n                                            value={username}\r\n                                            id=\"username\"\r\n                                            label=\"Username\"\r\n                                            name=\"username\"\r\n                                            disabled\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            autoComplete=\"fname\"\r\n                                            variant=\"outlined\"\r\n                                            required\r\n                                            fullWidth\r\n                                            value={fullname}\r\n                                            id=\"fullname\"\r\n                                            label=\"Full Name\"\r\n                                            name=\"fullname\"\r\n                                            disabled\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            required\r\n                                            fullWidth\r\n                                            value={email}\r\n                                            id=\"email\"\r\n                                            label=\"Email Address\"\r\n                                            name=\"email\"\r\n                                            autoComplete=\"email\"\r\n                                            disabled\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Button\r\n                                    onClick={(e) => banAccount(e)}\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color={isBan === config.STATUS.ACTIVE ? \"primary\" : \"secondary\"}\r\n                                    className={classes.submit}\r\n                                >\r\n                                {isBan === config.STATUS.ACTIVE ? \"Ban\" : \"Unban\"}\r\n                                </Button>\r\n                            </form>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={12} >\r\n                        <FinishRoomList />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    );\r\n}","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\home\\managementUsers.js",["176","177","178"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    useHistory,\r\n    useLocation\r\n} from \"react-router-dom\";\r\nimport {\r\n    Container,\r\n    CssBaseline,\r\n    Box,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TableFooter,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    Card,\r\n    Divider,\r\n    Typography,\r\n    Avatar,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport DataService from '../../utils/data.service';\r\nimport TableChartIcon from \"@material-ui/icons/TableChart\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(4),\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    table: {\r\n        borderTop: '1px solid #999'\r\n    },\r\n    bold: {\r\n        fontWeight: 'bold'\r\n    },\r\n    italic: {\r\n        fontStyle: 'italic'\r\n    },\r\n\r\n    timeCell: {\r\n        minWidth: '150px',\r\n        maxWidth: '150px',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    nameCell: {\r\n        minWidth: '100px',\r\n        maxWidth: '100px',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    footer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n    },\r\n    footerRow: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'flex-start'\r\n    },\r\n    buttonBox: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    button: {\r\n        margin: '0px 5px 0px 5px',\r\n    },\r\n\r\n\r\n}));\r\n\r\nconst Users = () => {\r\n    const classes = useStyles();\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const res = await DataService.getUsers();\r\n                console.log(res.data);\r\n                setUsers(res.data);\r\n                setRows(res.data);\r\n            }\r\n            catch (error) {\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    // table\r\n    const [selected, setSelected] = useState();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5)\r\n    const [rows, setRows] = useState([]);\r\n    // const rows = users;\r\n\r\n    const [id, setId] = useState(-1);\r\n    const handleClick = (event, id) => {\r\n        if (selected === id) {\r\n            setSelected(null);\r\n            setId(null);\r\n        }\r\n        else {\r\n            setSelected(id);\r\n            setId(id);\r\n        }\r\n    };\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n    const emptyRows = rows ? rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage) : 0;\r\n\r\n\r\n    const typeAccount = (type) => {\r\n        if(type === 1)\r\n            return \"ADMIN\";\r\n        return \"USER\"\r\n    }\r\n\r\n    const convertStatus = (type) =>{\r\n        if(type === 1)\r\n            return \"ACTIVE\";\r\n        return \"INACTIVE\";\r\n    }\r\n\r\n    const history = useHistory();\r\n    const profileUser = () => {\r\n        const path_url = `/users/${id}`\r\n        history.push(path_url);\r\n\r\n    }\r\n\r\n    const [target, setTarget] = useState(\"\");\r\n    const searchUsernameOrEmail= (e) => {\r\n        const targetField = e.target.value;\r\n        setTarget(targetField);\r\n        console.log(target);\r\n    }\r\n\r\n    const searchTarget = async (e) => {\r\n        if(target.length === 0){\r\n            const res = await DataService.getUsers();\r\n            setUsers(res.data);\r\n            setRows(res.data);\r\n        } else {\r\n            const user = await DataService.getUserByUsernameOrEmail(target);\r\n            if(user)\r\n                setRows(user.data);\r\n            else setRows(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth={false} className={classes.container}>\r\n            <CssBaseline />\r\n            <Card className={classes.card}>\r\n                <div display=\"flex\">\r\n                <Grid container >\r\n                    <Grid item justifyContent=\"flex-start\">\r\n                        <Avatar className={classes.avatar}>\r\n                            <TableChartIcon />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            List of user\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item justifyContent=\"flex-end\" alignItems={\"center\"}>\r\n                        <Grid container spacing={1} alignItems=\"flex-end\">\r\n                            <Grid item>\r\n                                <AccountCircle />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField id=\"input-with-icon-grid\" label=\"Username or Email\" onChange={(e) => searchUsernameOrEmail(e)}/>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button variant=\"outlined\" color=\"primary\" onClick={(e) => searchTarget(e)}>\r\n                                    Search\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n                <Divider />\r\n                <TableContainer className={classes.form}>\r\n                    <Table className={classes.table}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.bold} align=\"left\">ID</TableCell>\r\n                                <TableCell className={classes.bold} align=\"left\">Username</TableCell>\r\n                                <TableCell className={classes.bold} align=\"left\">Email</TableCell>\r\n                                <TableCell className={classes.bold} align=\"left\">Score</TableCell>\r\n                                <TableCell className={classes.bold} align=\"left\">Status</TableCell>\r\n                                <TableCell className={classes.bold} align=\"left\">Permission</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows\r\n                                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\r\n                                    const isItemSelected = row.ID === selected;\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.ID)}\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.ID}\r\n                                            selected={isItemSelected}>\r\n\r\n                                            <TableCell align=\"left\" className={classes.nameCell}>{row.ID}</TableCell>\r\n                                            <TableCell align=\"left\" className={classes.nameCell}>{row.username}</TableCell>\r\n                                            <TableCell align=\"left\" className={classes.nameCell}>{row.email}</TableCell>\r\n                                            <TableCell align=\"left\" className={classes.nameCell}>{row.score}</TableCell>\r\n                                            <TableCell align=\"left\" className={classes.nameCell}>{convertStatus(row.status)}</TableCell>\r\n                                            <TableCell align=\"left\" className={classes.nameCell}>{typeAccount(row.permission)}</TableCell>\r\n                                        </TableRow>\r\n                                )\r\n                                })\r\n                                : <></>\r\n                            }\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: 53 * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TableFooter className={classes.footer}>\r\n                    <TableRow className={classes.footerRow}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5]}\r\n                            count={rows ? rows.length : 0}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            component='div'\r\n                            onChangePage={handleChangePage}\r\n                        />\r\n                        <Box className={classes.buttonBox}>\r\n                            <Button size='small' className={classes.button} variant=\"contained\" color=\"primary\" onClick={profileUser}>\r\n                                View\r\n                            </Button>\r\n                        </Box>\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\AllRooms.js",["179","180","181"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    useHistory,\r\n    useParams,\r\n} from \"react-router-dom\";\r\nimport Moment from 'react-moment';\r\nimport {\r\n    Container,\r\n    CssBaseline,\r\n    Box,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TableFooter,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    Card,\r\n    Divider,\r\n    Typography,\r\n    Avatar,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport DataService from \"../../utils/data.service\";\r\nimport store from '../../utils/store.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(4),\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    table: {\r\n        borderTop: '1px solid #999'\r\n    },\r\n    bold: {\r\n        fontWeight: 'bold'\r\n    },\r\n    italic: {\r\n        fontStyle: 'italic'\r\n    },\r\n\r\n    timeCell: {\r\n        minWidth: '150px',\r\n        maxWidth: '150px',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    nameCell: {\r\n        minWidth: '100px',\r\n        maxWidth: '100px',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    footer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n    },\r\n    footerRow: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'flex-start'\r\n    },\r\n    buttonBox: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    button: {\r\n        margin: '0px 5px 0px 5px',\r\n    },\r\n\r\n\r\n}));\r\n\r\nconst FinishRoomList = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [data, setData] = useState();\r\n\r\n\r\n    // get initial data\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                    const res = await DataService.getAllFinishRoom();\r\n                    setData(res.data);\r\n            }\r\n            catch (error) {\r\n                const resMessage =\r\n                    (error.response && error.response.data && error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                alert(resMessage);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    // table\r\n    const [selected, setSelected] = useState();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const rows = data;\r\n\r\n    const handleClick = (event, name) => {\r\n        if (selected === name) {\r\n            setSelected(null);\r\n            setRoomId(null);\r\n        }\r\n        else {\r\n            setSelected(name);\r\n            setRoomId(name);\r\n        }\r\n    };\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n    const emptyRows = rows ? rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage) : 0;\r\n\r\n    // button\r\n    const [roomId, setRoomId] = useState(\"\");\r\n    const handleClickViewer = () => {\r\n        history.push(\"/History/Room/\" + roomId);\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth={false} className={classes.container}>\r\n            <CssBaseline />\r\n            <Card className={classes.card}>\r\n                <Avatar className={classes.avatar}>\r\n                    <TableChartIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Game History\r\n                </Typography>\r\n                <Divider />\r\n                <TableContainer className={classes.form}>\r\n                    <Table className={classes.table}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.bold}>Created</TableCell>\r\n                                <TableCell className={classes.bold} align=\"right\">Host match</TableCell>\r\n                                <TableCell className={classes.bold} align=\"right\">Player 2</TableCell>\r\n                                <TableCell className={classes.bold} align=\"right\">Winner</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows\r\n                                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\r\n                                    const isItemSelected = row.ID === selected;\r\n\r\n                                    const isWin = row.winner === 1 ? row.name1 : row.name2;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.ID)}\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.ID}\r\n                                            selected={isItemSelected}>\r\n                                            <TableCell component=\"th\" id={index} scope=\"row\" className={classes.timeCell}>\r\n                                                <Moment fromNow>{row.dateCreate}</Moment>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\" className={classes.nameCell}>{row.name1}</TableCell>\r\n                                            <TableCell align=\"right\" className={classes.nameCell}>{row.name2}</TableCell>\r\n                                            <TableCell align=\"right\" className={classes.bold}>{isWin}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                                : <></>\r\n                            }\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: 53 * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n\r\n                <TableFooter className={classes.footer}>\r\n                    <TableRow className={classes.footerRow}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5]}\r\n                            count={rows ? rows.length : 0}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            component='div'\r\n                            onChangePage={handleChangePage}\r\n                        />\r\n                        <Box className={classes.buttonBox}>\r\n                            <Button size='small' className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleClickViewer}>\r\n                                View\r\n                            </Button>\r\n                        </Box>\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default FinishRoomList;","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\RoomFinish.js",["182"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  Divider,\r\n  CardContent,\r\n  Box,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip\r\n} from '@material-ui/core';\r\nimport { IconContext } from \"react-icons\";\r\nimport { FaTrophy, FaInfoCircle } from \"react-icons/fa\";\r\n\r\nimport Game from './Game/game';\r\nimport { Chat } from './ChatOnline'\r\nimport socket from \"../../../utils/socket.service\";\r\nimport store from '../../../utils/store.service';\r\nimport DataService from \"../../../utils/data.service\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    overflow: 'auto',\r\n    marginTop: '20px',\r\n  },\r\n  container: {\r\n    marginTop: '20px',\r\n    marginBottom: '80px',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  playerName: {\r\n    maxWidth: \"100%\",\r\n    wordWrap: 'break-word',\r\n  },\r\n  gridHeight: {\r\n    minHeight: '440px',\r\n    maxHeight: \"440px\",\r\n  },\r\n  winColor: {\r\n    color: \"green\",\r\n  },\r\n  shareButtonContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row-reverse\",\r\n  },\r\n  topButton: {\r\n    marginLeft: '5px',\r\n    marginRight: '5px',\r\n    borderRight: '1px solid #fff',\r\n    borderRadius: '0px'\r\n  },\r\n\r\n  nameContainerLeft: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: 'flex-start',\r\n  },\r\n  nameContainerRight: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: 'flex-end',\r\n  },\r\n  trophyIcon: {\r\n    margin: '0 5px'\r\n  },\r\n  trophyCount: {\r\n    fontSize: '14px',\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\nexport default function RoomFinish(props) {\r\n  const classes = useStyles();\r\n  const ID = useParams().id;\r\n  const [room, setRoom] = useState();                   // room's data\r\n  const [gameData, setGameData] = useState();           //game's data\r\n  const [user, setUser] = useState(store.getState());\r\n  const [open, setOpen] = useState(false);             // snackbar's status\r\n  store.subscribe(() => {\r\n    setUser(store.getState());\r\n  });\r\n\r\n  // get room data\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await DataService.getFinishRoom(ID);\r\n        setRoom(res.data.data[0]);\r\n        setGameData(res.data.gameData);\r\n      }\r\n      catch (error) {\r\n        const resMessage =\r\n          (error.response && error.response.data && error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        alert(resMessage);\r\n      }\r\n    }\r\n    fetchData();\r\n\r\n  }, [ID]);\r\n\r\n  // copy ID room to clipboard\r\n  const copyLink = () => {\r\n\r\n    const link = ID;\r\n    // create temporary DOM to hold link, copy to clipboard then remove it\r\n    const dummy = document.createElement('input');\r\n    dummy.value = link;\r\n    document.body.appendChild(dummy);\r\n    dummy.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(dummy);\r\n\r\n    // show alert\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <main className={classes.content}>\r\n      <div className={classes.appBarSpacer} />\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item sm={8} xs={12} className={classes.gridHeight} >\r\n            <Card>\r\n              <Box className={classes.shareButtonContainer}>\r\n                <Tooltip title=\"Get room's ID\" aria-label=\"Get room's ID\">\r\n                  <IconButton className={classes.topButton} size=\"small\" onClick={() => copyLink()}>\r\n                    <FaInfoCircle></FaInfoCircle>\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Snackbar\r\n                  anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                  open={open}\r\n                  onClose={handleCloseSnackbar}\r\n                  message=\"ID copied to clipboard\"\r\n                />\r\n              </Box>\r\n              <CardContent>\r\n                {room\r\n                  ?\r\n                  <Grid container spacing={3} >\r\n                    <Grid container item lg={4} xs={12} className={classes.nameContainerLeft} zeroMinWidth>\r\n                      <Typography variant=\"h5\" noWrap className={room.winner === 1 ? classes.winColor : null}>{room.name1 ? \"(X) \" + room.name1 : \"(X) Waiting\"}</Typography>\r\n                      {room.name1\r\n                        ? <Box className={classes.trophyCount}>\r\n                          <IconContext.Provider value={{ color: '#e5c100' }}>\r\n                            <FaTrophy className={classes.trophyIcon} />\r\n                          </IconContext.Provider>\r\n                          <Typography noWrap className={null}> - {room.score1}</Typography>\r\n                        </Box>\r\n                        : <></>}\r\n                    </Grid>\r\n                    <Grid container item lg={4} xs={12} justify=\"center\">\r\n                      <Typography variant=\"h5\">VS</Typography>\r\n                    </Grid>\r\n                    <Grid container item lg={4} xs={12} className={classes.nameContainerRight} zeroMinWidth>\r\n                      <Typography variant=\"h5\" noWrap className={room.winner === 2 ? classes.winColor : null}>{room.name2 ? \"(O) \" + room.name2 : \"(O) Waiting\"}</Typography>\r\n                      {room.name2\r\n                        ? <Box className={classes.trophyCount}>\r\n                          <Typography noWrap className={null}>{room.score2} - </Typography>\r\n                          <IconContext.Provider value={{ color: '#FFD700' }}>\r\n                            <FaTrophy className={classes.trophyIcon} />\r\n                          </IconContext.Provider>\r\n                        </Box>\r\n                        : <></>}\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                  : <></>\r\n                }\r\n                <Divider />\r\n                <Game roomID={ID} roomData={room} gameData={gameData} />\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={4} xs={12} className={classes.gridHeight} >\r\n            {user\r\n              ? <Chat userID={user.ID} name={user.name} room={ID} />\r\n              : <Chat userID={null} name={null} room={ID} />}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </main>\r\n  );\r\n}","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\host.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\sideBar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\home\\listUser.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\topBar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\data.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\Game\\game.js",["183","184","185","186"],"import React, { useState, useEffect } from \"react\";\r\nimport './game.css';\r\nimport Board from './board.js';\r\nimport {\r\n    Box,\r\n    Grid,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport socket from \"../../../../utils/socket.service\";\r\nimport store from \"../../../../utils/store.service\";\r\nimport config from \"../../../../utils/config.json\";\r\n\r\n\r\nfunction Game(props) {\r\n    // change these to change the size of the board\r\n    const squareSize = config[\"square-size\"];\r\n    const column = config.column;\r\n    const row = config.row;\r\n    const gameData = props.gameData;\r\n    const roomData = props.roomData;\r\n\r\n    const [history, setHistory] = useState();\r\n    const [stepNumber, setStepNumber] = useState();\r\n    const [xIsNext, setXIsNext] = useState();\r\n    const [newMove, setNewMove] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        // set innitial data\r\n        if (gameData) {\r\n            setHistory(gameData.history);\r\n            setStepNumber(gameData.stepNumber);\r\n            setXIsNext(gameData.xIsNext);\r\n        }\r\n    }, [gameData]);\r\n\r\n    const calculateWinner = (squares, stepNumber, move) => {\r\n        const row = 50;\r\n        const column = 50;\r\n        const win = 5;\r\n\r\n        //  illegal move\r\n        if (move === -1) {\r\n            return ({\r\n                line: null,\r\n                status: -1,\r\n            })\r\n        }\r\n\r\n        // 1d array to 2d array\r\n        const x = Math.floor(move / column);\r\n        const y = move % column;\r\n\r\n        // check column\r\n        let line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + y]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + y] !== null) {\r\n                line.push(tempX * column + y);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check row\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempY = y + i;\r\n            // skip line start from outside and line too short\r\n            if (tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[x * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[x * column + tempY] !== null) {\r\n                line.push(x * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check diagonal\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            const tempY = y + i;\r\n\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row || tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + tempY] !== null) {\r\n                line.push(tempX * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check anti-diagonal\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            const tempY = y - i;\r\n\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row || tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + tempY] !== null) {\r\n                line.push(tempX * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check draw\r\n        if (stepNumber === column * row) {\r\n            return ({\r\n                line: null,\r\n                status: 0,\r\n            })\r\n        }\r\n\r\n        // game continues\r\n        return ({\r\n            line: null,\r\n            status: -1,\r\n        })\r\n    }\r\n\r\n    /*     \r\n    //undo\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n    */\r\n\r\n    if (!history || !roomData) {\r\n        return (<CircularProgress />)\r\n    }\r\n    else {\r\n        const current = history[stepNumber];\r\n        const winner = calculateWinner(current.squares, stepNumber, current.move);\r\n\r\n        const moves = history.map((turn, i) => {\r\n            const x = Math.floor(turn.move / column);\r\n            const y = turn.move % column;\r\n\r\n            const player = (i % 2) === 0 ? \"O\" : \"X\";\r\n\r\n            const desc = i ?\r\n                'Turn ' + i + ': (' + x + ',' + y + ') - ' + player :\r\n                'Game start';\r\n            /*\r\n            // undo\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => jumpTo(move)}>\r\n                        {current === turn ? <b>{desc}</b> : <>{desc}</>}\r\n                    </button>\r\n                </li>\r\n            );\r\n            */\r\n            return (\r\n                <li key={i}>\r\n                    {current === turn ? <b>{desc}</b> : <>{desc}</>}\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let statusDes;\r\n        const finalMoves = moves.slice().reverse();\r\n        \r\n        if (roomData.winner === -1) {\r\n            if (winner.status === -1) {\r\n                statusDes = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n            }\r\n            else if (winner.status === 0) {\r\n                statusDes = 'Draw';\r\n            }\r\n            else {\r\n                statusDes = 'Winner: ' + winner.status;\r\n            }\r\n        }\r\n        else {\r\n            if (roomData.winner === 0) {\r\n                statusDes = 'Draw';\r\n            }\r\n            else {\r\n                \r\n                statusDes = 'Winner: ' + (roomData.winner === 1 ? \"X\" : \"O\");\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <Box className=\"game\" >\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={8} >\r\n                        <Box width=\"95%\" height={290} overflow=\"auto\">\r\n                            <Box className=\"gameContainer\" height={squareSize * row} width={squareSize * column}>\r\n                                <Board\r\n                                    column={column}\r\n                                    row={row}\r\n                                    squares={current.squares}\r\n                                    winnerLine={winner.line}\r\n                                />\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Box width=\"95%\" height={290} overflow=\"auto\">\r\n                            {(roomData.idUser1 && roomData.idUser2)\r\n                                ? <div>\r\n                                    <div>\r\n                                        {winner.line\r\n                                            ? <b>{statusDes}</b>\r\n                                            : <>{statusDes}</>\r\n                                        }\r\n                                    </div>\r\n                                    <div>History: </div>\r\n                                    <ol>{finalMoves}</ol>\r\n                                </div>\r\n                                : <div>Waiting for both players</div>\r\n                            }\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Game;\r\n","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\FinishRoomList.js",["187","188","189","190"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  useHistory,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport Moment from 'react-moment';\r\nimport {\r\n  Container,\r\n  CssBaseline,\r\n  Box,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  Card,\r\n  Divider,\r\n  Typography,\r\n  Avatar,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport DataService from \"../../utils/data.service\";\r\nimport store from '../../utils/store.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(4),\r\n  },\r\n  container: {\r\n    padding: '0px'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  table: {\r\n    borderTop: '1px solid #999'\r\n  },\r\n  bold: {\r\n    fontWeight: 'bold'\r\n  },\r\n  italic: {\r\n    fontStyle: 'italic'\r\n  },\r\n\r\n  timeCell: {\r\n    minWidth: '150px',\r\n    maxWidth: '150px',\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n  },\r\n  nameCell: {\r\n    minWidth: '100px',\r\n    maxWidth: '100px',\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n  },\r\n  footer: {\r\n    width: '100%',\r\n    display: 'flex',\r\n  },\r\n  footerRow: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'flex-start'\r\n  },\r\n  buttonBox: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  button: {\r\n    margin: '0px 5px 0px 5px',\r\n  },\r\n\r\n\r\n}));\r\n\r\nconst FinishRoomList = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const {id} = useParams();\r\n  const [data, setData] = useState();\r\n  const [user, setUser] = useState([]);\r\n  const [nMatch, setNMatch] = useState(0);\r\n  const [rate, setRate] = useState(0);\r\n\r\n  // get initial data\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res1 = await DataService.getUserByUserId(id);\r\n        setUser(res1.data[0]);\r\n        if (res1) {\r\n          const res = await DataService.getFinishRoomList(res1.data[0].ID);\r\n          console.log()\r\n          setData(res.data);\r\n          setNMatch(res.data.length);\r\n        }\r\n      }\r\n      catch (error) {\r\n        const resMessage =\r\n          (error.response && error.response.data && error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        alert(resMessage);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [id]);\r\n\r\n  // table\r\n  const [selected, setSelected] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const rows = data;\r\n\r\n  const handleClick = (event, name) => {\r\n    if (selected === name) {\r\n      setSelected(null);\r\n      setRoomId(null);\r\n    }\r\n    else {\r\n      setSelected(name);\r\n      setRoomId(name);\r\n    }\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const emptyRows = rows ? rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage) : 0;\r\n\r\n  // button\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const handleClickViewer = () => {\r\n    history.push(\"/History/Room/\" + roomId);\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth={false} className={classes.container}>\r\n      <CssBaseline />\r\n      <Card className={classes.card}>\r\n        <Avatar className={classes.avatar}>\r\n          <TableChartIcon />\r\n        </Avatar>\r\n        <div display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <Typography component=\"h1\" variant=\"h5\" flex=\"1\">\r\n            Game History\r\n          </Typography>\r\n          <Typography component=\"h1\" variant=\"h5\" flex=\"1\">\r\n            Total Match: {nMatch}\r\n          </Typography>\r\n        </div>\r\n        <Divider />\r\n        <TableContainer className={classes.form}>\r\n          <Table className={classes.table}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.bold}>Created</TableCell>\r\n                <TableCell className={classes.bold} align=\"right\">Host match</TableCell>\r\n                <TableCell className={classes.bold} align=\"right\">Player 2</TableCell>\r\n                <TableCell className={classes.bold} align=\"right\">Status</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows\r\n                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\r\n                  const isItemSelected = row.ID === selected;\r\n\r\n                  const isPlayer1 = row.name1 === user.username ? 1 : 2;\r\n                  let isWin = null;\r\n                  if (row.winner === 0) {\r\n                    isWin = \"Draw\"\r\n                  }\r\n                  else if (isPlayer1 === row.winner) {\r\n                    isWin = \"Won\";\r\n                  }\r\n                  else if (isPlayer1 !== row.winner) {\r\n                    isWin = \"Lost\"\r\n                  }\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.ID)}\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.ID}\r\n                      selected={isItemSelected}>\r\n                      <TableCell component=\"th\" id={index} scope=\"row\" className={classes.timeCell}>\r\n                        <Moment fromNow>{row.dateCreate}</Moment>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\" className={classes.nameCell}>{row.name1}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.nameCell}>{row.name2}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.bold}>{isWin}</TableCell>\r\n                    </TableRow>\r\n                  )\r\n                })\r\n                : <></>\r\n              }\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <TableFooter className={classes.footer}>\r\n          <TableRow className={classes.footerRow}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5]}\r\n              count={rows ? rows.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              component='div'\r\n              onChangePage={handleChangePage}\r\n            />\r\n            <Box className={classes.buttonBox}>\r\n              <Button size='small' className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleClickViewer}>\r\n                View\r\n            </Button>\r\n            </Box>\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default FinishRoomList;","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\utils\\title.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\Game\\board.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\menu\\sideBarList.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\index.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\Game\\square.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Join\\Join.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Chat\\Chat.js",["191","192","193","194"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent\r\n} from '@material-ui/core';\r\n\r\nimport { InfoBar } from '../InforBar/InforBar';\r\nimport { Input } from '../Input/Input';\r\nimport { Messages } from '../Messages/Messages';\r\nimport { TextContainer } from '../TextContainter/TextContainer'\r\nimport socket from \"../../../../../utils/socket.service\";\r\nimport DataService from \"../../../../../utils/data.service\";\r\nimport './Chat.css';\r\n\r\nexport const Chat = (props) => {\r\n    const [users, setUsers] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const res = await DataService.getMessage(props.room);\r\n                setMessages(res.data);\r\n            }\r\n            catch (error) {\r\n                const resMessage =\r\n                    (error.response && error.response.data && error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                alert(resMessage);\r\n            }\r\n        }\r\n        fetchData();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"outerContainer\">\r\n            {true ? <></> :\r\n                <TextContainer users={users} />}\r\n            <div className=\"container\">\r\n                <InfoBar room={props.room} />\r\n                {props.name\r\n                    ? <>\r\n                        <Messages messages={messages} name={props.name} />\r\n                        <Input message={message} />\r\n                    </>\r\n                    : <CardContent className=\"notLogin\">Login to see chat</CardContent>\r\n                }\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\TextContainter\\TextContainer.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Messages\\Messages.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Input\\Input.js",["195","196"],"import React from 'react';\r\n\r\nimport './Input.css';\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nexport const Input = ({ message }) => (\r\n    <form className=\"form\">\r\n        <input\r\n            readOnly\r\n            className=\"input\"\r\n            type=\"text\"\r\n            placeholder=\"Game has end\"\r\n            value={message}\r\n        />\r\n    </form>\r\n);","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\InforBar\\InforBar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Admin\\admin-ui\\src\\components\\Rooms\\RoomFinish\\ChatOnline\\Messages\\Message\\Message.js",[],["197","198"],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":16,"column":8,"nodeType":"205","messageId":"206","endLine":16,"endColumn":12},{"ruleId":"203","severity":1,"message":"207","line":17,"column":8,"nodeType":"205","messageId":"206","endLine":17,"endColumn":11},{"ruleId":"203","severity":1,"message":"208","line":18,"column":8,"nodeType":"205","messageId":"206","endLine":18,"endColumn":20},{"ruleId":"203","severity":1,"message":"209","line":19,"column":8,"nodeType":"205","messageId":"206","endLine":19,"endColumn":16},{"ruleId":"210","severity":1,"message":"211","line":84,"column":8,"nodeType":"212","endLine":84,"endColumn":10,"suggestions":"213"},{"ruleId":"203","severity":1,"message":"214","line":7,"column":8,"nodeType":"205","messageId":"206","endLine":7,"endColumn":19},{"ruleId":"203","severity":1,"message":"215","line":12,"column":8,"nodeType":"205","messageId":"206","endLine":12,"endColumn":24},{"ruleId":"203","severity":1,"message":"216","line":13,"column":8,"nodeType":"205","messageId":"206","endLine":13,"endColumn":18},{"ruleId":"203","severity":1,"message":"217","line":18,"column":8,"nodeType":"205","messageId":"206","endLine":18,"endColumn":21},{"ruleId":"203","severity":1,"message":"218","line":73,"column":21,"nodeType":"205","messageId":"206","endLine":73,"endColumn":31},{"ruleId":"203","severity":1,"message":"219","line":74,"column":20,"nodeType":"205","messageId":"206","endLine":74,"endColumn":29},{"ruleId":"203","severity":1,"message":"220","line":77,"column":11,"nodeType":"205","messageId":"206","endLine":77,"endColumn":18},{"ruleId":"203","severity":1,"message":"221","line":96,"column":15,"nodeType":"205","messageId":"206","endLine":96,"endColumn":18},{"ruleId":"203","severity":1,"message":"222","line":4,"column":5,"nodeType":"205","messageId":"206","endLine":4,"endColumn":16},{"ruleId":"203","severity":1,"message":"223","line":100,"column":12,"nodeType":"205","messageId":"206","endLine":100,"endColumn":17},{"ruleId":"203","severity":1,"message":"224","line":119,"column":25,"nodeType":"205","messageId":"206","endLine":119,"endColumn":39},{"ruleId":"203","severity":1,"message":"225","line":4,"column":5,"nodeType":"205","messageId":"206","endLine":4,"endColumn":14},{"ruleId":"203","severity":1,"message":"226","line":28,"column":8,"nodeType":"205","messageId":"206","endLine":28,"endColumn":13},{"ruleId":"203","severity":1,"message":"224","line":123,"column":25,"nodeType":"205","messageId":"206","endLine":123,"endColumn":39},{"ruleId":"203","severity":1,"message":"227","line":23,"column":8,"nodeType":"205","messageId":"206","endLine":23,"endColumn":14},{"ruleId":"203","severity":1,"message":"227","line":9,"column":8,"nodeType":"205","messageId":"206","endLine":9,"endColumn":14},{"ruleId":"203","severity":1,"message":"226","line":10,"column":8,"nodeType":"205","messageId":"206","endLine":10,"endColumn":13},{"ruleId":"203","severity":1,"message":"228","line":25,"column":12,"nodeType":"205","messageId":"206","endLine":25,"endColumn":19},{"ruleId":"203","severity":1,"message":"229","line":25,"column":21,"nodeType":"205","messageId":"206","endLine":25,"endColumn":31},{"ruleId":"203","severity":1,"message":"226","line":28,"column":8,"nodeType":"205","messageId":"206","endLine":28,"endColumn":13},{"ruleId":"203","severity":1,"message":"230","line":102,"column":10,"nodeType":"205","messageId":"206","endLine":102,"endColumn":14},{"ruleId":"203","severity":1,"message":"231","line":102,"column":16,"nodeType":"205","messageId":"206","endLine":102,"endColumn":23},{"ruleId":"203","severity":1,"message":"224","line":131,"column":23,"nodeType":"205","messageId":"206","endLine":131,"endColumn":37},{"ruleId":"203","severity":1,"message":"227","line":11,"column":8,"nodeType":"205","messageId":"206","endLine":11,"endColumn":14},{"ruleId":"203","severity":1,"message":"232","line":16,"column":19,"nodeType":"205","messageId":"206","endLine":16,"endColumn":27},{"ruleId":"203","severity":1,"message":"218","line":17,"column":21,"nodeType":"205","messageId":"206","endLine":17,"endColumn":31},{"ruleId":"210","severity":1,"message":"233","line":36,"column":8,"nodeType":"212","endLine":36,"endColumn":10,"suggestions":"234"},{"ruleId":"203","severity":1,"message":"235","line":4,"column":9,"nodeType":"205","messageId":"206","endLine":4,"endColumn":14},{"ruleId":"203","severity":1,"message":"236","line":5,"column":8,"nodeType":"205","messageId":"206","endLine":5,"endColumn":16},{"ruleId":"199","replacedBy":"237"},{"ruleId":"201","replacedBy":"238"},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'red' is defined but never used.","'FacebookIcon' is defined but never used.","'MailIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'location.search'. Either include them or remove the dependency array.","ArrayExpression",["241"],"'CssBaseline' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Typography' is defined but never used.","'isPlainObject' is defined but never used.","'setMessage' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'history' is assigned a value but never used.","'ban' is assigned a value but never used.","'useLocation' is defined but never used.","'users' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","'useParams' is defined but never used.","'store' is defined but never used.","'socket' is defined but never used.","'newMove' is assigned a value but never used.","'setNewMove' is assigned a value but never used.","'rate' is assigned a value but never used.","'setRate' is assigned a value but never used.","'setUsers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.room'. Either include it or remove the dependency array.",["242"],"'green' is defined but never used.","'SendIcon' is defined but never used.",["239"],["240"],"no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: [history, location.search]",{"range":"247","text":"248"},"Update the dependencies array to be: [props.room]",{"range":"249","text":"250"},[2763,2765],"[history, location.search]",[1189,1191],"[props.room]"]