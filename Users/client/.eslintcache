[{"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\index.js":"1","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\App.js":"2","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\store.service.js":"3","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\PrivateRoute.js":"4","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\socket.service.js":"5","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\auth.service.js":"6","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Home\\Home.js":"7","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\Menu.js":"8","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\NotFound.js":"9","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\User\\Account.js":"10","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Authenticate\\SignUp.js":"11","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Authenticate\\Login.js":"12","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\User\\ChangePass.js":"13","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\host.service.js":"14","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\ListUser.js":"15","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\SideBar.js":"16","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\Topbar.js":"17","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\data.service.js":"18","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\SideBarList.js":"19","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\title.service.js":"20","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\reducer\\reducer.js":"21","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\index.js":"22","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Chat\\Chat.js":"23","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Join\\Join.js":"24","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\TextContainter\\TextContainer.js":"25","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Messages\\Messages.js":"26","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Input\\Input.js":"27","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\InforBar\\InforBar.js":"28","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Messages\\Message\\Message.js":"29","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\index.js":"30","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Chat\\Chat.js":"31","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Join\\Join.js":"32","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\InforBar\\InforBar.js":"33","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Input\\Input.js":"34","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Messages\\Messages.js":"35","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\TextContainter\\TextContainer.js":"36","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Messages\\Message\\Message.js":"37","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Room.js":"38","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Game\\game.js":"39","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Game\\board.js":"40","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Game\\square.js":"41","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\RoomFinish.js":"42","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\Game\\game.js":"43","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\Game\\board.js":"44","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\Game\\square.js":"45","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\User\\FinishRoomList.js":"46","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Home\\ListContainer.js":"47","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Home\\OnlineRoomList.js":"48"},{"size":367,"mtime":1608857798130,"results":"49","hashOfConfig":"50"},{"size":3718,"mtime":1609381699306,"results":"51","hashOfConfig":"50"},{"size":145,"mtime":1608967819955,"results":"52","hashOfConfig":"50"},{"size":513,"mtime":1608857798110,"results":"53","hashOfConfig":"50"},{"size":214,"mtime":1608857798133,"results":"54","hashOfConfig":"50"},{"size":1501,"mtime":1608857798131,"results":"55","hashOfConfig":"50"},{"size":1776,"mtime":1609376860755,"results":"56","hashOfConfig":"50"},{"size":693,"mtime":1608948953501,"results":"57","hashOfConfig":"50"},{"size":278,"mtime":1608857798124,"results":"58","hashOfConfig":"50"},{"size":5682,"mtime":1609373375224,"results":"59","hashOfConfig":"50"},{"size":6607,"mtime":1609295418788,"results":"60","hashOfConfig":"50"},{"size":4284,"mtime":1608967819949,"results":"61","hashOfConfig":"50"},{"size":6293,"mtime":1609373493834,"results":"62","hashOfConfig":"50"},{"size":229,"mtime":1608869815704,"results":"63","hashOfConfig":"50"},{"size":5931,"mtime":1609040734686,"results":"64","hashOfConfig":"50"},{"size":1812,"mtime":1608857798123,"results":"65","hashOfConfig":"50"},{"size":8628,"mtime":1609040734687,"results":"66","hashOfConfig":"50"},{"size":1619,"mtime":1609383607991,"results":"67","hashOfConfig":"50"},{"size":1698,"mtime":1609373331749,"results":"68","hashOfConfig":"50"},{"size":460,"mtime":1609337791110,"results":"69","hashOfConfig":"50"},{"size":750,"mtime":1608967819954,"results":"70","hashOfConfig":"50"},{"size":66,"mtime":1608857798120,"results":"71","hashOfConfig":"50"},{"size":2006,"mtime":1609375638617,"results":"72","hashOfConfig":"50"},{"size":1038,"mtime":1608857798116,"results":"73","hashOfConfig":"50"},{"size":955,"mtime":1608857798119,"results":"74","hashOfConfig":"50"},{"size":378,"mtime":1608857798118,"results":"75","hashOfConfig":"50"},{"size":1189,"mtime":1609376094259,"results":"76","hashOfConfig":"50"},{"size":237,"mtime":1608857798114,"results":"77","hashOfConfig":"50"},{"size":1109,"mtime":1608857798117,"results":"78","hashOfConfig":"50"},{"size":66,"mtime":1609323937676,"results":"79","hashOfConfig":"50"},{"size":1780,"mtime":1609384549756,"results":"80","hashOfConfig":"50"},{"size":1038,"mtime":1609323937659,"results":"81","hashOfConfig":"50"},{"size":237,"mtime":1609323937652,"results":"82","hashOfConfig":"50"},{"size":413,"mtime":1609324410859,"results":"83","hashOfConfig":"50"},{"size":378,"mtime":1609323937667,"results":"84","hashOfConfig":"50"},{"size":955,"mtime":1609323937674,"results":"85","hashOfConfig":"50"},{"size":1109,"mtime":1609323937665,"results":"86","hashOfConfig":"50"},{"size":6306,"mtime":1609376004810,"results":"87","hashOfConfig":"50"},{"size":11153,"mtime":1609325133666,"results":"88","hashOfConfig":"50"},{"size":979,"mtime":1609295422423,"results":"89","hashOfConfig":"50"},{"size":230,"mtime":1608857798127,"results":"90","hashOfConfig":"50"},{"size":6269,"mtime":1609378107976,"results":"91","hashOfConfig":"50"},{"size":9512,"mtime":1609325075282,"results":"92","hashOfConfig":"50"},{"size":979,"mtime":1609323055535,"results":"93","hashOfConfig":"50"},{"size":230,"mtime":1609323055634,"results":"94","hashOfConfig":"50"},{"size":6831,"mtime":1609378864953,"results":"95","hashOfConfig":"50"},{"size":4792,"mtime":1609376897916,"results":"96","hashOfConfig":"50"},{"size":8184,"mtime":1609376887970,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1lsjbq4",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"100"},"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\index.js",[],["203","204"],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\App.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\store.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\PrivateRoute.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\socket.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\auth.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Home\\Home.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\Menu.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\NotFound.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\User\\Account.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Authenticate\\SignUp.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Authenticate\\Login.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\User\\ChangePass.js",["205"],"import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport DataService from \"../../utils/data.service\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    card: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(4),\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function ChangePass() {\r\n    const classes = useStyles();\r\n    const [oldPass, setOldPass] = useState(\"\");\r\n    const [newPass, setNewPass] = useState(\"\");\r\n    const [newPass2, setNewPass2] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [status, setStatus] = useState(\"error\");\r\n\r\n    const onChangeOldPass = (e) => {\r\n        setOldPass(e.target.value);\r\n    };\r\n\r\n    const onChangeNewPass = (e) => {\r\n        setNewPass(e.target.value);\r\n    };\r\n\r\n    const onChangeNewPass2 = (e) => {\r\n        setNewPass2(e.target.value);\r\n    };\r\n\r\n    // auth\r\n    const changePass = async (e) => {\r\n        e.preventDefault();\r\n        setMessage(\"\");\r\n\r\n\r\n\r\n        if (oldPass === \"\" || newPass === \"\" || newPass2 === \"\") {\r\n            setMessage(\"All fields must not be empty\");\r\n            setStatus(\"error\");\r\n        }\r\n        else if (oldPass.length > 50 || newPass.length > 50 || newPass2.length > 50) {\r\n            setMessage(\"All fields must not exceed 50 character\");\r\n            setStatus(\"error\");\r\n        }\r\n        else if (newPass !== newPass2) {\r\n            setMessage(\"Passwords don't match\");\r\n            setStatus(\"error\");\r\n        }\r\n        else {\r\n            try {\r\n                await DataService.changePassword(oldPass, newPass)\r\n                setMessage(\"Thanh đổi thành công\");\r\n                setStatus(\"success\");\r\n            }\r\n            catch (error) {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setMessage(resMessage);\r\n                setStatus(\"error\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth='xs' className={classes.container}>\r\n            <CssBaseline />\r\n            <Card className={classes.card}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Change password\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            {message && (\r\n                                <div className=\"form-group\">\r\n                                    <Alert severity={status}>\r\n                                        {message}\r\n                                    </Alert>\r\n                                </div>\r\n                            )}\r\n\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"oldPass\"\r\n                                label=\"Old password\"\r\n                                name=\"oldPass\"\r\n                                type=\"password\"\r\n                                autoFocus\r\n                                onChange={(value) => onChangeOldPass(value)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"newPass\"\r\n                                label=\"New password\"\r\n                                name=\"newPass\"\r\n                                type=\"password\"\r\n                                onChange={(value) => onChangeNewPass(value)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"newPass2\"\r\n                                label=\"Repeat new password\"\r\n                                name=\"newPass2\"\r\n                                type=\"password\"\r\n                                onChange={(value) => onChangeNewPass2(value)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        onClick={(e) => changePass(e)}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Change password\r\n          </Button>\r\n                </form>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\host.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\ListUser.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\SideBar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\Topbar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\data.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Menu\\SideBarList.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\utils\\title.service.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\reducer\\reducer.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\index.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Chat\\Chat.js",["206"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent\r\n} from '@material-ui/core';\r\n\r\nimport { InfoBar } from '../InforBar/InforBar';\r\nimport { Input } from '../Input/Input';\r\nimport { Messages } from '../Messages/Messages';\r\nimport { TextContainer } from '../TextContainter/TextContainer'\r\nimport socket from \"../../../../utils/socket.service\";\r\nimport './Chat.css';\r\n\r\nexport const Chat = (props) => {\r\n    const [users, setUsers] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socket.emit(\"get_chat_data\", {roomID: props.room}, (chatData) => {\r\n            console.log(chatData);\r\n            setMessages(chatData);\r\n        });\r\n\r\n        socket.on('message', message => {\r\n            setMessages(msgs => [...msgs, message]);\r\n        });\r\n\r\n        socket.on(\"usersInRoom\", ({ users }) => {\r\n            setUsers(users);\r\n        });\r\n\r\n        return () => {\r\n            socket.off(\"message\");\r\n            socket.off(\"usersInRoom\");\r\n        }\r\n\r\n    }, []);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (message) {\r\n            socket.emit('sendMessage', { message, userID: props.userID, roomID: props.room }, () => setMessage(''));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className=\"outerContainer\">\r\n            {true ? <></> :\r\n                <TextContainer users={users} />}\r\n            <div className=\"container\">\r\n                <InfoBar room={props.room} />\r\n                {props.name\r\n                    ? <>\r\n                        <Messages messages={messages} name={props.name} />\r\n                        <Input message={message} status={props.status} setMessage={setMessage} sendMessage={sendMessage} />\r\n                    </>\r\n                    : <CardContent className=\"notLogin\">Login to see chat</CardContent>\r\n                }\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Join\\Join.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\TextContainter\\TextContainer.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Messages\\Messages.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Input\\Input.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\InforBar\\InforBar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\ChatOnline\\Messages\\Message\\Message.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\index.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Chat\\Chat.js",["207","208","209","210"],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Join\\Join.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\InforBar\\InforBar.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Input\\Input.js",["211","212"],"import React from 'react';\r\n\r\nimport './Input.css';\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nexport const Input = ({ message }) => (\r\n    <form className=\"form\">\r\n        <input\r\n            readOnly\r\n            className=\"input\"\r\n            type=\"text\"\r\n            placeholder=\"Game has end\"\r\n            value={message}\r\n        />\r\n    </form>\r\n);","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Messages\\Messages.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\TextContainter\\TextContainer.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\ChatOnline\\Messages\\Message\\Message.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Room.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Game\\game.js",["213"],"import React, { useState, useEffect } from \"react\";\r\nimport './game.css';\r\nimport Board from './board.js';\r\nimport {\r\n    Box,\r\n    Grid,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport socket from \"../../../utils/socket.service\";\r\nimport store from \"../../../utils/store.service\";\r\nimport config from \"../../../utils/config.json\";\r\n\r\n\r\nfunction Game(props) {\r\n    // change these to change the size of the board\r\n    const squareSize = config[\"square-size\"];\r\n    const column = config.column;\r\n    const row = config.row;\r\n    const gameData = props.gameData;\r\n    const roomData = props.roomData;\r\n\r\n    const [history, setHistory] = useState();\r\n    const [stepNumber, setStepNumber] = useState();\r\n    const [xIsNext, setXIsNext] = useState();\r\n    const [newMove, setNewMove] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        // set innitial data\r\n        if (gameData) {\r\n            setHistory(gameData.history);\r\n            setStepNumber(gameData.stepNumber);\r\n            setXIsNext(gameData.xIsNext);\r\n        }\r\n\r\n        // wait for new move\r\n        socket.on('wait_new_move', setNewMove);\r\n\r\n        return () => {\r\n            socket.off(\"wait_new_move\");\r\n        }\r\n\r\n    }, [gameData]);\r\n\r\n    useEffect(() => {\r\n        console.log(newMove);\r\n        receiveMove(newMove);\r\n    }, [newMove]);\r\n\r\n    const receiveMove = (newMove) => {\r\n        if (newMove !== -1 && history) {\r\n            // handle click\r\n            const newHistory = history.slice(0, stepNumber + 1);\r\n            const current = newHistory[newHistory.length - 1];\r\n            const squares = current.squares.slice();\r\n\r\n            squares[newMove] = xIsNext ? 'X' : 'O';\r\n            setHistory(\r\n                newHistory.concat([{\r\n                    squares: squares,\r\n                    move: newMove,\r\n                }])\r\n            );\r\n            setStepNumber(newHistory.length);\r\n            setXIsNext(!xIsNext);\r\n        }\r\n    }\r\n\r\n    const calculateWinner = (squares, stepNumber, move) => {\r\n        const row = 50;\r\n        const column = 50;\r\n        const win = 5;\r\n\r\n        //  illegal move\r\n        if (move === -1) {\r\n            return ({\r\n                line: null,\r\n                status: -1,\r\n            })\r\n        }\r\n\r\n        // 1d array to 2d array\r\n        const x = Math.floor(move / column);\r\n        const y = move % column;\r\n\r\n        // check column\r\n        let line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + y]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + y] !== null) {\r\n                line.push(tempX * column + y);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check row\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempY = y + i;\r\n            // skip line start from outside and line too short\r\n            if (tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[x * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[x * column + tempY] !== null) {\r\n                line.push(x * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check diagonal\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            const tempY = y + i;\r\n\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row || tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + tempY] !== null) {\r\n                line.push(tempX * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check anti-diagonal\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            const tempY = y - i;\r\n\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row || tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + tempY] !== null) {\r\n                line.push(tempX * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check draw\r\n        if (stepNumber === column * row) {\r\n            return ({\r\n                line: null,\r\n                status: 0,\r\n            })\r\n        }\r\n\r\n        // game continues\r\n        return ({\r\n            line: null,\r\n            status: -1,\r\n        })\r\n    }\r\n\r\n    const handleClick = (i, previousMove) => {\r\n        // handle click\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        // check if move is valid locally\r\n        const checkFinish = calculateWinner(squares, stepNumber, previousMove);\r\n        if (checkFinish.status !== -1 || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        // check if move is valid on server\r\n        const user = store.getState().user;\r\n        socket.emit(\"play\", { move: i, userID: user.ID, roomID: props.roomID, turn: stepNumber + 1 },\r\n            (isValid) => {                  // callback after server check\r\n                if (isValid) {\r\n                    squares[i] = xIsNext ? 'X' : 'O';\r\n\r\n                    setHistory(\r\n                        newHistory.concat([{\r\n                            squares: squares,\r\n                            move: i,\r\n                        }])\r\n                    );\r\n                    setStepNumber(newHistory.length);\r\n                    setXIsNext(!xIsNext);\r\n\r\n                    // check win\r\n                    const checkFinish = calculateWinner(squares, stepNumber, i);\r\n                    if (checkFinish) {\r\n                        socket.emit(\"game_finish\", { roomID: props.roomID, status: checkFinish.status });\r\n                    }\r\n                }\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n\r\n    /*     \r\n    //undo\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n    */\r\n\r\n    if (!history || !roomData) {\r\n        return (<CircularProgress />)\r\n    }\r\n    else {\r\n        const current = history[stepNumber];\r\n        const winner = calculateWinner(current.squares, stepNumber, current.move);\r\n\r\n        const moves = history.map((turn, i) => {\r\n            const x = Math.floor(turn.move / column);\r\n            const y = turn.move % column;\r\n\r\n            const player = (i % 2) === 0 ? \"O\" : \"X\";\r\n\r\n            const desc = i ?\r\n                'Turn ' + i + ': (' + x + ',' + y + ') - ' + player :\r\n                'Game start';\r\n            /*\r\n            // undo\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => jumpTo(move)}>\r\n                        {current === turn ? <b>{desc}</b> : <>{desc}</>}\r\n                    </button>\r\n                </li>\r\n            );\r\n            */\r\n            return (\r\n                <li key={i}>\r\n                    {current === turn ? <b>{desc}</b> : <>{desc}</>}\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let statusDes;\r\n        const finalMoves = moves.slice().reverse();\r\n        if (winner.status === -1) {\r\n            statusDes = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n        }\r\n        else if (winner.status === 0) {\r\n            statusDes = 'Draw';\r\n        }\r\n        else {\r\n            statusDes = 'Winner: ' + winner.status;\r\n        }\r\n\r\n        return (\r\n            <Box className=\"game\" >\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={8} >\r\n                        <Box width=\"95%\" height={290} overflow=\"auto\">\r\n                            <Box className=\"gameContainer\" height={squareSize * row} width={squareSize * column}>\r\n                                <Board\r\n                                    column={column}\r\n                                    row={row}\r\n                                    squares={current.squares}\r\n                                    onClick={(i) => handleClick(i, current.move)}\r\n                                    winnerLine={winner.line}\r\n                                />\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Box width=\"95%\" height={290} overflow=\"auto\">\r\n                            {(roomData.idUser1 && roomData.idUser2)\r\n                                ? <div>\r\n                                    <div>\r\n                                        {winner.line\r\n                                            ? <b>{statusDes}</b>\r\n                                            : <>{statusDes}</>\r\n                                        }\r\n                                    </div>\r\n                                    <div>History: </div>\r\n                                    <ol>{finalMoves}</ol>\r\n                                </div>\r\n                                : <div>Waiting for both players</div>\r\n                            }\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Game;\r\n","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Game\\board.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomCurrent\\Game\\square.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\RoomFinish.js",["214"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  Divider,\r\n  CardContent,\r\n  Box,\r\n  Snackbar,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { IconContext } from \"react-icons\";\r\nimport { FaTrophy } from \"react-icons/fa\";\r\n\r\nimport Game from './Game/game';\r\nimport { Chat } from './ChatOnline'\r\nimport socket from \"../../utils/socket.service\";\r\nimport store from '../../utils/store.service';\r\nimport DataService from \"../../utils/data.service\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    overflow: 'auto',\r\n    marginTop: '20px',\r\n  },\r\n  container: {\r\n    marginTop: '20px',\r\n    marginBottom: '80px',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  playerName: {\r\n    maxWidth: \"100%\",\r\n    wordWrap: 'break-word',\r\n  },\r\n  gridHeight: {\r\n    minHeight: '440px',\r\n    maxHeight: \"440px\",\r\n  },\r\n  winColor: {\r\n    color: \"green\",\r\n  },\r\n  shareButtonContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row-reverse\",\r\n  },\r\n  nameContainerLeft: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: 'flex-start',\r\n  },\r\n  nameContainerRight: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: 'flex-end',\r\n  },\r\n  trophyIcon: {\r\n    margin: '0 5px'\r\n  },\r\n  trophyCount: {\r\n    fontSize: '14px',\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\nexport default function RoomFinish(props) {\r\n  const classes = useStyles();\r\n  const ID = useParams().id;\r\n  const [room, setRoom] = useState();                   // room's data\r\n  const [gameData, setGameData] = useState();           //game's data\r\n  const [user, setUser] = useState(store.getState().user);\r\n  const [open, setOpen] = useState(false);             // snackbar's status\r\n  store.subscribe(() => {\r\n    setUser(store.getState().user);\r\n  });\r\n\r\n  // get room data\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await DataService.getFinishRoom(ID);\r\n        setRoom(res.data.data[0]);\r\n        setGameData(res.data.gameData);\r\n      }\r\n      catch (error) {\r\n        const resMessage =\r\n          (error.response && error.response.data && error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        alert(resMessage);\r\n      }\r\n    }\r\n    fetchData();\r\n\r\n  }, [ID]);\r\n\r\n  // copy ID room to clipboard\r\n  const copyLink = () => {\r\n\r\n    const link = ID;\r\n    // create temporary DOM to hold link, copy to clipboard then remove it\r\n    const dummy = document.createElement('input');\r\n    dummy.value = link;\r\n    document.body.appendChild(dummy);\r\n    dummy.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(dummy);\r\n\r\n    // show alert\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <main className={classes.content}>\r\n      <div className={classes.appBarSpacer} />\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item sm={8} xs={12} className={classes.gridHeight} >\r\n            <Card>\r\n              <Box className={classes.shareButtonContainer}>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => copyLink()}>\r\n                  Get room's ID\r\n                </Button>\r\n                <Snackbar\r\n                  anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                  open={open}\r\n                  onClose={handleCloseSnackbar}\r\n                  message=\"ID copied to clipboard\"\r\n                />\r\n              </Box>\r\n              <CardContent>\r\n                {room\r\n                  ?\r\n                  <Grid container spacing={3} >\r\n                    <Grid container item xs={4} className={classes.nameContainerLeft} zeroMinWidth>\r\n                      <Typography variant=\"h5\" noWrap className={room.winner === 1 ? classes.winColor : null}>{room.name1 ? \"(X) \" + room.name1 : \"(X) Waiting\"}</Typography>\r\n                      {room.name1\r\n                        ? <Box className={classes.trophyCount}>\r\n                          <IconContext.Provider value={{ color: '#e5c100' }}>\r\n                            <FaTrophy className={classes.trophyIcon} />\r\n                          </IconContext.Provider>\r\n                          <Typography noWrap className={null}> - {room.score1}</Typography>\r\n                        </Box>\r\n                        : <></>}\r\n                    </Grid>\r\n                    <Grid container item xs={4} justify=\"center\">\r\n                      <Typography variant=\"h5\">VS</Typography>\r\n                    </Grid>\r\n                    <Grid container item xs={4} className={classes.nameContainerRight} zeroMinWidth>\r\n                      <Typography variant=\"h5\" noWrap className={room.winner === 2 ? classes.winColor : null}>{room.name2 ? \"(X) \" + room.name2 : \"(X) Waiting\"}</Typography>\r\n                      {room.name2\r\n                        ? <Box className={classes.trophyCount}>\r\n                          <Typography noWrap className={null}>{room.score2} - </Typography>\r\n                          <IconContext.Provider value={{ color: '#FFD700' }}>\r\n                            <FaTrophy className={classes.trophyIcon} />\r\n                          </IconContext.Provider>\r\n                        </Box>\r\n                        : <></>}\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                  : <></>\r\n                }\r\n                <Divider />\r\n                <Game roomID={ID} roomData={room} gameData={gameData} />\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={4} xs={12} className={classes.gridHeight} >\r\n            {user\r\n              ? <Chat userID={user.ID} name={user.name} room={ID} />\r\n              : <Chat userID={null} name={null} room={ID} />}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </main>\r\n  );\r\n}","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\Game\\game.js",["215","216","217","218"],"import React, { useState, useEffect } from \"react\";\r\nimport './game.css';\r\nimport Board from './board.js';\r\nimport {\r\n    Box,\r\n    Grid,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport socket from \"../../../utils/socket.service\";\r\nimport store from \"../../../utils/store.service\";\r\nimport config from \"../../../utils/config.json\";\r\n\r\n\r\nfunction Game(props) {\r\n    // change these to change the size of the board\r\n    const squareSize = config[\"square-size\"];\r\n    const column = config.column;\r\n    const row = config.row;\r\n    const gameData = props.gameData;\r\n    const roomData = props.roomData;\r\n\r\n    const [history, setHistory] = useState();\r\n    const [stepNumber, setStepNumber] = useState();\r\n    const [xIsNext, setXIsNext] = useState();\r\n    const [newMove, setNewMove] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        // set innitial data\r\n        if (gameData) {\r\n            setHistory(gameData.history);\r\n            setStepNumber(gameData.stepNumber);\r\n            setXIsNext(gameData.xIsNext);\r\n        }\r\n    }, [gameData]);\r\n\r\n    const calculateWinner = (squares, stepNumber, move) => {\r\n        const row = 50;\r\n        const column = 50;\r\n        const win = 5;\r\n\r\n        //  illegal move\r\n        if (move === -1) {\r\n            return ({\r\n                line: null,\r\n                status: -1,\r\n            })\r\n        }\r\n\r\n        // 1d array to 2d array\r\n        const x = Math.floor(move / column);\r\n        const y = move % column;\r\n\r\n        // check column\r\n        let line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + y]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + y] !== null) {\r\n                line.push(tempX * column + y);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check row\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempY = y + i;\r\n            // skip line start from outside and line too short\r\n            if (tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[x * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[x * column + tempY] !== null) {\r\n                line.push(x * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check diagonal\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            const tempY = y + i;\r\n\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row || tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + tempY] !== null) {\r\n                line.push(tempX * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check anti-diagonal\r\n        line = [];\r\n        for (let i = 0 - win; i < win; i++) {\r\n            const tempX = x + i;\r\n            const tempY = y - i;\r\n\r\n            // skip line start from outside and line too short\r\n            if (tempX < 0 || tempX > row || tempY < 0 || tempY > column) {\r\n                continue;\r\n            }\r\n            // if line has at least 1 square, check next square\r\n            if (line.length !== 0 && squares[line[0]] !== squares[tempX * column + tempY]) {\r\n                line = [];\r\n            }\r\n            // ignore empty square\r\n            if (squares[tempX * column + tempY] !== null) {\r\n                line.push(tempX * column + tempY);\r\n            }\r\n            // check if line's length == win\r\n            if (line.length === win) {\r\n                return ({\r\n                    line: line,\r\n                    status: squares[x * column + y],\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        // check draw\r\n        if (stepNumber === column * row) {\r\n            return ({\r\n                line: null,\r\n                status: 0,\r\n            })\r\n        }\r\n\r\n        // game continues\r\n        return ({\r\n            line: null,\r\n            status: -1,\r\n        })\r\n    }\r\n\r\n    const handleClick = (i, previousMove) => {\r\n        // handle click\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        // check if move is valid locally\r\n        const checkFinish = calculateWinner(squares, stepNumber, previousMove);\r\n        if (checkFinish.status !== -1 || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = xIsNext ? 'X' : 'O';\r\n\r\n        setHistory(\r\n            newHistory.concat([{\r\n                squares: squares,\r\n                move: i,\r\n            }])\r\n        );\r\n        setStepNumber(newHistory.length);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n\r\n\r\n    /*     \r\n    //undo\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n    */\r\n\r\n    if (!history || !roomData) {\r\n        return (<CircularProgress />)\r\n    }\r\n    else {\r\n        const current = history[stepNumber];\r\n        const winner = calculateWinner(current.squares, stepNumber, current.move);\r\n\r\n        const moves = history.map((turn, i) => {\r\n            const x = Math.floor(turn.move / column);\r\n            const y = turn.move % column;\r\n\r\n            const player = (i % 2) === 0 ? \"O\" : \"X\";\r\n\r\n            const desc = i ?\r\n                'Turn ' + i + ': (' + x + ',' + y + ') - ' + player :\r\n                'Game start';\r\n            /*\r\n            // undo\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => jumpTo(move)}>\r\n                        {current === turn ? <b>{desc}</b> : <>{desc}</>}\r\n                    </button>\r\n                </li>\r\n            );\r\n            */\r\n            return (\r\n                <li key={i}>\r\n                    {current === turn ? <b>{desc}</b> : <>{desc}</>}\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let statusDes;\r\n        const finalMoves = moves.slice().reverse();\r\n        if (winner.status === -1) {\r\n            statusDes = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n        }\r\n        else if (winner.status === 0) {\r\n            statusDes = 'Draw';\r\n        }\r\n        else {\r\n            statusDes = 'Winner: ' + winner.status;\r\n        }\r\n\r\n        return (\r\n            <Box className=\"game\" >\r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={8} >\r\n                        <Box width=\"95%\" height={290} overflow=\"auto\">\r\n                            <Box className=\"gameContainer\" height={squareSize * row} width={squareSize * column}>\r\n                                <Board\r\n                                    column={column}\r\n                                    row={row}\r\n                                    squares={current.squares}\r\n                                    onClick={(i) => handleClick(i, current.move)}\r\n                                    winnerLine={winner.line}\r\n                                />\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Box width=\"95%\" height={290} overflow=\"auto\">\r\n                            {(roomData.idUser1 && roomData.idUser2)\r\n                                ? <div>\r\n                                    <div>\r\n                                        {winner.line\r\n                                            ? <b>{statusDes}</b>\r\n                                            : <>{statusDes}</>\r\n                                        }\r\n                                    </div>\r\n                                    <div>History: </div>\r\n                                    <ol>{finalMoves}</ol>\r\n                                </div>\r\n                                : <div>Waiting for both players</div>\r\n                            }\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Game;\r\n","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\Game\\board.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\RoomFinish\\Game\\square.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\User\\FinishRoomList.js",["219","220"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport Moment from 'react-moment';\r\nimport {\r\n  Container,\r\n  CssBaseline,\r\n  Box,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  Card,\r\n  Divider,\r\n  Typography,\r\n  Avatar,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport DataService from \"../../utils/data.service\";\r\nimport store from '../../utils/store.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(4),\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  table: {\r\n    borderTop: '1px solid #999'\r\n  },\r\n  bold: {\r\n    fontWeight: 'bold'\r\n  },\r\n  italic: {\r\n    fontStyle: 'italic'\r\n  },\r\n\r\n  timeCell: {\r\n    minWidth: '150px',\r\n    maxWidth: '150px',\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n  },\r\n  nameCell: {\r\n    minWidth: '100px',\r\n    maxWidth: '100px',\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n  },\r\n  footer: {\r\n    width: '100%',\r\n    display: 'flex',\r\n  },\r\n  footerRow: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'flex-start'\r\n  },\r\n  buttonBox: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  button: {\r\n    margin: '0px 5px 0px 5px',\r\n  },\r\n\r\n\r\n}));\r\n\r\nconst FinishRoomList = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [data, setData] = useState();\r\n  const [user, setUser] = useState(store.getState().user);\r\n  store.subscribe(() => {\r\n    setUser(store.getState().user);\r\n  });\r\n\r\n  // get initial data\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await DataService.getFinishRoomList(user.ID);\r\n        setData(res.data);\r\n      }\r\n      catch (error) {\r\n        const resMessage =\r\n          (error.response && error.response.data && error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        alert(resMessage);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  // table\r\n  const [selected, setSelected] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const rows = data;\r\n\r\n  const handleClick = (event, name) => {\r\n    if (selected === name) {\r\n      setSelected(null);\r\n      setRoomId(null);\r\n    }\r\n    else {\r\n      setSelected(name);\r\n      setRoomId(name);\r\n    }\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const emptyRows = rows ? rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage) : 0;\r\n\r\n  // button\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const handleClickViewer = () => {\r\n    history.push(\"/History/Room/\" + roomId);\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth={false} className={classes.container}>\r\n      <CssBaseline />\r\n      <Card className={classes.card}>\r\n        <Avatar className={classes.avatar}>\r\n          <TableChartIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Game History\r\n        </Typography>\r\n        <Divider />\r\n        <TableContainer className={classes.form}>\r\n          <Table className={classes.table}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.bold}>Created</TableCell>\r\n                <TableCell className={classes.bold} align=\"right\">Player 1</TableCell>\r\n                <TableCell className={classes.bold} align=\"right\">Player 2</TableCell>\r\n                <TableCell className={classes.bold} align=\"right\">Status</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows\r\n                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\r\n                  const isItemSelected = row.ID === selected;\r\n                  \r\n                  const isPlayer1 = row.name1 === user.name ? 1 : 2;\r\n                  let isWin = null;\r\n                  if (row.winner === 0) {\r\n                    isWin = \"Draw\"\r\n                  }\r\n                  else if (isPlayer1 === row.winner) {\r\n                    isWin = \"Won\"\r\n                  }\r\n                  else if (isPlayer1 !== row.winner) {\r\n                    isWin = \"Lost\"\r\n                  }\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.ID)}\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.ID}\r\n                      selected={isItemSelected}>\r\n                      <TableCell component=\"th\" id={index} scope=\"row\" className={classes.timeCell}>\r\n                        <Moment fromNow>{row.dateCreate}</Moment>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\" className={classes.nameCell}>{row.name1}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.nameCell}>{row.name2}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.bold}>{isWin}</TableCell>\r\n                    </TableRow>\r\n                  )\r\n                })\r\n                : <></>\r\n              }\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <TableFooter className={classes.footer}>\r\n          <TableRow className={classes.footerRow}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5]}\r\n              count={rows ? rows.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              component='div'\r\n              onChangePage={handleChangePage}\r\n            />\r\n            <Box className={classes.buttonBox}>\r\n              <Button size='small' className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleClickViewer}>\r\n                View\r\n            </Button>\r\n            </Box>\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default FinishRoomList;","C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Home\\ListContainer.js",[],"C:\\Users\\MY PC\\Desktop\\Github repose\\WebCaroOnline\\Users\\client\\src\\components\\Home\\OnlineRoomList.js",["221"],"import React, { useState } from 'react';\r\nimport {\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport Moment from 'react-moment';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\nimport DataService from \"../../utils/data.service\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  bold: {\r\n    fontWeight: 'bold'\r\n  },\r\n  italic: {\r\n    fontStyle: 'italic'\r\n  },\r\n\r\n  timeCell: {\r\n    minWidth: '150px',\r\n    maxWidth: '150px',\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n  },\r\n  nameCell: {\r\n    minWidth: '100px',\r\n    maxWidth: '100px',\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n  },\r\n  footer: {\r\n    width: '100%',\r\n    display: 'flex',\r\n  },\r\n  footerRow: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'flex-start'\r\n  },\r\n  buttonBox: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  button: {\r\n    margin: '0px 5px 0px 5px',\r\n  },\r\n\r\n\r\n}));\r\n\r\nconst OnlineRoomList = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  // table\r\n  const [selected, setSelected] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const rows = props.data;\r\n\r\n  const handleClick = (event, name) => {\r\n    if (selected === name) {\r\n      setSelected(null);\r\n      setRoomId(null);\r\n    }\r\n    else {\r\n      setSelected(name);\r\n      setRoomId(name);\r\n    }\r\n  };\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const emptyRows = rows ? rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage) : 0;\r\n\r\n  // button\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const [openPlayer, setOpenPlayer] = useState(false);\r\n  const [openViewer, setOpenViewer] = useState(false);\r\n  const handleClickOpenPlayer = () => {\r\n    setOpenPlayer(true);\r\n  };\r\n\r\n  const handleClosePlayer = () => {\r\n    setOpenPlayer(false);\r\n  };\r\n\r\n  const handleClickOpenViewer = () => {\r\n    setOpenViewer(true);\r\n  };\r\n\r\n  const handleCloseViewer = () => {\r\n    setOpenViewer(false);\r\n  };\r\n\r\n  const joinRoomAsPlayer = async () => {\r\n    try {\r\n      const result = await DataService.joinRoomAsPlayer(roomId);\r\n      history.push(\"/Room/\" + result.data.ID);\r\n    } catch (error) {\r\n      const resMessage =\r\n        (error.response && error.response.data && error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      alert(resMessage)\r\n    }\r\n  }\r\n\r\n  const joinRoomAsViewer = async () => {\r\n    try {\r\n      const result = await DataService.joinRoomAsViewer(roomId);\r\n      history.push(\"/Room/\" + result.data.ID);\r\n    } catch (error) {\r\n      const resMessage =\r\n        (error.response && error.response.data && error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      alert(resMessage)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <TableContainer>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.bold}>Created</TableCell>\r\n              <TableCell className={classes.bold} align=\"right\">Player 1</TableCell>\r\n              <TableCell className={classes.bold} align=\"right\">Player 2</TableCell>\r\n              <TableCell className={classes.bold} align=\"right\">Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\r\n                const isItemSelected = row.ID === selected;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, row.ID)}\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.ID}\r\n                    selected={isItemSelected}>\r\n                    <TableCell component=\"th\" id={index} scope=\"row\" className={classes.timeCell}>\r\n                      <Moment fromNow>{row.dateCreate}</Moment>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\" className={classes.nameCell}>{row.name1}</TableCell>\r\n                    <TableCell align=\"right\" className={classes.nameCell}>{row.name2}</TableCell>\r\n                    {(row.name1 === null || row.name2 === null)\r\n                      ? <TableCell align=\"right\" className={classes.italic}>Waiting</TableCell>\r\n                      : <TableCell align=\"right\">Playing</TableCell>}\r\n                  </TableRow>\r\n                )\r\n              })\r\n              : <></>\r\n            }\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <TableFooter className={classes.footer}>\r\n        <TableRow className={classes.footerRow}>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5]}\r\n            count={rows ? rows.length : 0}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            component='div'\r\n            onChangePage={handleChangePage}\r\n          />\r\n          <Box className={classes.buttonBox}>\r\n            <Button size='small' className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleClickOpenPlayer}>\r\n              Join\r\n        </Button>\r\n            <Button size='small' className={classes.button} variant=\"contained\" color=\"primary\" onClick={handleClickOpenViewer}>\r\n              View\r\n        </Button>\r\n            <Dialog open={openPlayer} onClose={handleClosePlayer} aria-labelledby=\"form-dialog-title\">\r\n              <DialogTitle id=\"form-dialog-title\">Join</DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText>\r\n                  Enter the room's ID\r\n              </DialogContentText>\r\n                <TextField\r\n                  autoFocus\r\n                  margin=\"dense\"\r\n                  id=\"roomID\"\r\n                  label=\"RoomID\"\r\n                  type=\"roomID\"\r\n                  value={roomId}\r\n                  fullWidth\r\n                  onChange={e => setRoomId(e.target.value)}\r\n                />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClosePlayer} color=\"primary\">\r\n                  Cancel\r\n              </Button>\r\n                <Button onClick={joinRoomAsPlayer} color=\"primary\">\r\n                  Join as player\r\n              </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={openViewer} onClose={handleCloseViewer} aria-labelledby=\"form-dialog-title\">\r\n              <DialogTitle id=\"form-dialog-title\">View</DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText>\r\n                  Enter the room's ID or select from table\r\n              </DialogContentText>\r\n                <TextField\r\n                  autoFocus\r\n                  margin=\"dense\"\r\n                  id=\"roomID\"\r\n                  label=\"RoomID\"\r\n                  type=\"roomID\"\r\n                  value={roomId}\r\n                  fullWidth\r\n                  onChange={e => setRoomId(e.target.value)}\r\n                />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleCloseViewer} color=\"primary\">\r\n                  Cancel\r\n              </Button>\r\n                <Button onClick={joinRoomAsViewer} color=\"primary\">\r\n                  Join as viewer\r\n              </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Box>\r\n        </TableRow>\r\n      </TableFooter>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default OnlineRoomList;",{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":8,"column":8,"nodeType":"228","messageId":"229","endLine":8,"endColumn":15},{"ruleId":"230","severity":1,"message":"231","line":38,"column":8,"nodeType":"232","endLine":38,"endColumn":10,"suggestions":"233"},{"ruleId":"226","severity":1,"message":"234","line":11,"column":8,"nodeType":"228","messageId":"229","endLine":11,"endColumn":14},{"ruleId":"226","severity":1,"message":"235","line":16,"column":19,"nodeType":"228","messageId":"229","endLine":16,"endColumn":27},{"ruleId":"226","severity":1,"message":"236","line":17,"column":21,"nodeType":"228","messageId":"229","endLine":17,"endColumn":31},{"ruleId":"230","severity":1,"message":"231","line":36,"column":8,"nodeType":"232","endLine":36,"endColumn":10,"suggestions":"237"},{"ruleId":"226","severity":1,"message":"238","line":4,"column":9,"nodeType":"228","messageId":"229","endLine":4,"endColumn":14},{"ruleId":"226","severity":1,"message":"239","line":5,"column":8,"nodeType":"228","messageId":"229","endLine":5,"endColumn":16},{"ruleId":"230","severity":1,"message":"240","line":47,"column":8,"nodeType":"232","endLine":47,"endColumn":17,"suggestions":"241"},{"ruleId":"226","severity":1,"message":"234","line":22,"column":8,"nodeType":"228","messageId":"229","endLine":22,"endColumn":14},{"ruleId":"226","severity":1,"message":"234","line":9,"column":8,"nodeType":"228","messageId":"229","endLine":9,"endColumn":14},{"ruleId":"226","severity":1,"message":"242","line":10,"column":8,"nodeType":"228","messageId":"229","endLine":10,"endColumn":13},{"ruleId":"226","severity":1,"message":"243","line":25,"column":12,"nodeType":"228","messageId":"229","endLine":25,"endColumn":19},{"ruleId":"226","severity":1,"message":"244","line":25,"column":21,"nodeType":"228","messageId":"229","endLine":25,"endColumn":31},{"ruleId":"230","severity":1,"message":"245","line":120,"column":6,"nodeType":"232","endLine":120,"endColumn":8,"suggestions":"246"},{"ruleId":"226","severity":1,"message":"247","line":125,"column":23,"nodeType":"228","messageId":"229","endLine":125,"endColumn":37},{"ruleId":"226","severity":1,"message":"247","line":81,"column":23,"nodeType":"228","messageId":"229","endLine":81,"endColumn":37},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.room'. Either include it or remove the dependency array.","ArrayExpression",["250"],"'socket' is defined but never used.","'setUsers' is assigned a value but never used.","'setMessage' is assigned a value but never used.",["251"],"'green' is defined but never used.","'SendIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'receiveMove'. Either include it or remove the dependency array.",["252"],"'store' is defined but never used.","'newMove' is assigned a value but never used.","'setNewMove' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.ID'. Either include it or remove the dependency array.",["253"],"'setRowsPerPage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"254","fix":"255"},{"desc":"254","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},"Update the dependencies array to be: [props.room]",{"range":"261","text":"262"},{"range":"263","text":"262"},"Update the dependencies array to be: [newMove, receiveMove]",{"range":"264","text":"265"},"Update the dependencies array to be: [user.ID]",{"range":"266","text":"267"},[1102,1104],"[props.room]",[1183,1185],[1313,1322],"[newMove, receiveMove]",[2581,2583],"[user.ID]"]